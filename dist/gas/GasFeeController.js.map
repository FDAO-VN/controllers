{"version":3,"file":"GasFeeController.js","sourceRoot":"","sources":["../../src/gas/GasFeeController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Patch } from 'immer';\n\nimport EthQuery from 'eth-query';\nimport { v1 as random } from 'uuid';\nimport { BaseController } from '../BaseControllerV2';\nimport { safelyExecute } from '../util';\nimport type { RestrictedControllerMessenger } from '../ControllerMessenger';\nimport type {\n  NetworkController,\n  NetworkState,\n} from '../network/NetworkController';\nimport {\n  fetchGasEstimates as defaultFetchGasEstimates,\n  fetchLegacyGasPriceEstimate as defaultFetchLegacyGasPriceEstimate,\n  calculateTimeEstimate,\n} from './gas-util';\n\nexport type unknownString = 'unknown';\n\nexport interface EstimatedGasFeeTimeBounds {\n  lowerTimeBound: number | null;\n  upperTimeBound: number | unknownString;\n}\n\n/**\n * @type LegacyGasPriceEstimate\n *\n * A single gas price estimate for networks and accounts that don't support EIP-1559\n *\n * @property gasPrice - A GWEI hex number, the result of a call to eth_gasPrice\n */\n\nexport interface LegacyGasPriceEstimate {\n  gasPrice: string;\n}\n\n/**\n * @type Eip1559GasFee\n *\n * Data necessary to provide an estimate of a gas fee with a specific tip\n *\n * @property minWaitTimeEstimate - The fastest the transaction will take, in milliseconds\n * @property maxWaitTimeEstimate - The slowest the transaction will take, in milliseconds\n * @property suggestedMaxPriorityFeePerGas - A suggested \"tip\", a GWEI hex number\n * @property suggestedMaxFeePerGas - A suggested max fee, the most a user will pay. a GWEI hex number\n */\n\ninterface Eip1559GasFee {\n  minWaitTimeEstimate: number; // a time duration in milliseconds\n  maxWaitTimeEstimate: number; // a time duration in milliseconds\n  suggestedMaxPriorityFeePerGas: string; // a GWEI hex number\n  suggestedMaxFeePerGas: string; // a GWEI hex number\n}\n\nfunction isEIP1559GasFeee(object: any): object is Eip1559GasFee {\n  return (\n    'minWaitTimeEstimate' in object &&\n    'maxWaitTimeEstimate' in object &&\n    'suggestedMaxPriorityFeePerGas' in object &&\n    'suggestedMaxFeePerGas' in object &&\n    Object.keys(object).length === 4\n  );\n}\n\n/**\n * @type GasFeeEstimates\n *\n * Data necessary to provide multiple GasFee estimates, and supporting information, to the user\n *\n * @property low - A GasFee for a minimum necessary combination of tip and maxFee\n * @property medium - A GasFee for a recommended combination of tip and maxFee\n * @property high - A GasFee for a high combination of tip and maxFee\n * @property estimatedNextBlockBaseFee - An estimate of what the base fee will be for the pending/next block. A GWEI hex number\n */\n\nexport interface GasFeeEstimates {\n  low: Eip1559GasFee;\n  medium: Eip1559GasFee;\n  high: Eip1559GasFee;\n  estimatedBaseFee: string;\n}\n\nfunction isEIP1559Estimate(object: any): object is GasFeeEstimates {\n  return (\n    'low' in object &&\n    isEIP1559GasFeee(object.low) &&\n    'medium' in object &&\n    isEIP1559GasFeee(object.medium) &&\n    'high' in object &&\n    isEIP1559GasFeee(object.high) &&\n    'estimatedBaseFee' in object\n  );\n}\n\nconst metadata = {\n  gasFeeEstimates: { persist: true, anonymous: false },\n  estimatedGasFeeTimeBounds: { persist: true, anonymous: false },\n};\n\n/**\n * @type GasFeeState\n *\n * Gas Fee controller state\n *\n * @property gasFeeEstimates - Gas fee estimate data based on new EIP-1559 properties\n * @property estimatedGasFeeTimeBounds - Estimates representing the minimum and maximum\n */\nexport type GasFeeState = {\n  gasFeeEstimates:\n    | GasFeeEstimates\n    | LegacyGasPriceEstimate\n    | Record<string, never>;\n  estimatedGasFeeTimeBounds: EstimatedGasFeeTimeBounds | Record<string, never>;\n};\n\nconst name = 'GasFeeController';\n\nexport type GasFeeStateChange = {\n  type: `${typeof name}:stateChange`;\n  payload: [GasFeeState, Patch[]];\n};\n\nexport type GetGasFeeState = {\n  type: `${typeof name}:getState`;\n  handler: () => GasFeeState;\n};\n\nconst defaultState = {\n  gasFeeEstimates: {},\n  estimatedGasFeeTimeBounds: {},\n};\n\n/**\n * Controller that retrieves gas fee estimate data and polls for updated data on a set interval\n */\nexport class GasFeeController extends BaseController<typeof name, GasFeeState> {\n  private intervalId?: NodeJS.Timeout;\n\n  private intervalDelay;\n\n  private pollTokens: Set<string>;\n\n  private fetchGasEstimates;\n\n  private fetchLegacyGasPriceEstimate;\n\n  private getCurrentNetworkEIP1559Compatibility;\n\n  private getCurrentAccountEIP1559Compatibility;\n\n  private ethQuery: any;\n\n  /**\n   * Creates a GasFeeController instance\n   *\n   */\n  constructor({\n    interval = 15000,\n    messenger,\n    state,\n    fetchGasEstimates = defaultFetchGasEstimates,\n    fetchLegacyGasPriceEstimate = defaultFetchLegacyGasPriceEstimate,\n    getCurrentNetworkEIP1559Compatibility,\n    getCurrentAccountEIP1559Compatibility,\n    getProvider,\n    onNetworkStateChange,\n  }: {\n    interval?: number;\n    messenger: RestrictedControllerMessenger<\n      typeof name,\n      GetGasFeeState,\n      GasFeeStateChange,\n      never,\n      never\n    >;\n    state?: Partial<GasFeeState>;\n    fetchGasEstimates?: typeof defaultFetchGasEstimates;\n    fetchLegacyGasPriceEstimate?: typeof defaultFetchLegacyGasPriceEstimate;\n    getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n    getCurrentAccountEIP1559Compatibility?: () => boolean;\n    getProvider: () => NetworkController['provider'];\n    onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.intervalDelay = interval;\n    this.fetchGasEstimates = fetchGasEstimates;\n    this.fetchLegacyGasPriceEstimate = fetchLegacyGasPriceEstimate;\n    this.pollTokens = new Set();\n    this.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;\n    this.getCurrentAccountEIP1559Compatibility = getCurrentAccountEIP1559Compatibility;\n\n    const provider = getProvider();\n    this.ethQuery = new EthQuery(provider);\n    onNetworkStateChange(() => {\n      const newProvider = getProvider();\n      this.ethQuery = new EthQuery(newProvider);\n    });\n  }\n\n  async fetchGasFeeEstimates() {\n    return await this._fetchGasFeeEstimateData();\n  }\n\n  async getGasFeeEstimatesAndStartPolling(\n    pollToken: string | undefined,\n  ): Promise<string> {\n    if (this.pollTokens.size === 0) {\n      await this._fetchGasFeeEstimateData();\n    }\n\n    const _pollToken = pollToken || random();\n\n    this._startPolling(_pollToken);\n\n    return _pollToken;\n  }\n\n  /**\n   * Gets and sets gasFeeEstimates in state\n   *\n   * @returns GasFeeEstimates\n   */\n  async _fetchGasFeeEstimateData(): Promise<GasFeeState | undefined> {\n    let estimates;\n    let estimatedGasFeeTimeBounds = {};\n    let isEIP1559Compatible;\n    try {\n      isEIP1559Compatible = await this.getEIP1559Compatibility();\n    } catch (e) {\n      console.error(e);\n      isEIP1559Compatible = false;\n    }\n\n    if (isEIP1559Compatible) {\n      try {\n        estimates = await this.fetchGasEstimates();\n        const {\n          suggestedMaxPriorityFeePerGas,\n          suggestedMaxFeePerGas,\n        } = estimates.medium;\n        estimatedGasFeeTimeBounds = this.getTimeEstimate(\n          suggestedMaxPriorityFeePerGas,\n          suggestedMaxFeePerGas,\n        );\n      } catch (error) {\n        try {\n          estimates = await this.fetchLegacyGasPriceEstimate(this.ethQuery);\n        } catch (error2) {\n          throw new Error(\n            `Gas fee/price estimation failed. Message: ${error2.message}`,\n          );\n        }\n      }\n    } else {\n      try {\n        estimates = await this.fetchLegacyGasPriceEstimate(this.ethQuery);\n      } catch (error2) {\n        throw new Error(\n          `Gas fee/price estimation failed. Message: ${error2.message}`,\n        );\n      }\n    }\n\n    const newState: GasFeeState = {\n      gasFeeEstimates: estimates,\n      estimatedGasFeeTimeBounds,\n    };\n\n    this.update(() => {\n      return newState;\n    });\n\n    return newState;\n  }\n\n  /**\n   * Remove the poll token, and stop polling if the set of poll tokens is empty\n   */\n  disconnectPoller(pollToken: string) {\n    this.pollTokens.delete(pollToken);\n    if (this.pollTokens.size === 0) {\n      this.stopPolling();\n    }\n  }\n\n  stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.pollTokens.clear();\n    this.resetState();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  // should take a token, so we know that we are only counting once for each open transaction\n  private async _startPolling(pollToken: string) {\n    if (this.pollTokens.size === 0) {\n      this._poll();\n    }\n    this.pollTokens.add(pollToken);\n  }\n\n  private async _poll() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this._fetchGasFeeEstimateData());\n    }, this.intervalDelay);\n  }\n\n  private resetState() {\n    this.update(() => {\n      return defaultState;\n    });\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n\n  getTimeEstimate(\n    maxPriorityFeePerGas: string,\n    maxFeePerGas: string,\n  ): EstimatedGasFeeTimeBounds | Record<string, never> {\n    if (\n      !this.state.gasFeeEstimates ||\n      !isEIP1559Estimate(this.state.gasFeeEstimates)\n    ) {\n      return {};\n    }\n    return calculateTimeEstimate(\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      this.state.gasFeeEstimates,\n    );\n  }\n}\n\nexport default GasFeeController;\n"]}